- Permit to omit useless functions in events ( like update or collisionAction for event3c, or movements for chest0 )

- Remove viewport by adding static vars to Map
	=> Like Map::scrollX and Map::scrollY
	=> Or find a better way for map scrolling

- Add a class "LuaMod" or "ModScript" or "Mod"
~ Create a class "ModLibrary" which will provide through static functions
   all that is required to mod the game correctly, like easy functions

- Add a "Switch" class
- Add other Lua pseudo-classes like "Enemy", "Door", "Teleporter", "Switch", etc...

- Add a lot of functions to Window class
	=> It might be helpful in the near future
	* Example: "printActorHP(actor, x, y, width)" which will display something like "HP:	320"
	* Maybe create a global function "printStat(x, y, name, value, nameWidth, width)"
	* Improve windows by using these functions

- Fix issues:
	* #16 - Work on transitions between maps
		=> Add a line like <border pos="Left" area="" mapX="" mapY=""/>
			* Scroll like in Radonia
			* While scrolling, render a scaled version of the two maps, to improve performances
		=> Add a Transition class, child of Sprite, to handle map transitions
	* #17 - Up and Down keys have an higher priority than Left and Right ones
		=> Make a key stack, and then search for the last directional key pressed
		=> Function u32 Keyboard::lastDirectionKeyPressed();
	* #19 - Improve Activity rendering by screenshotting and saving previous screen, to display it faster
		=> Render copy once in a texture in a push_back, then push the texture too
	* #29 - Improve victory window
		=> Make a VictoryWindow
	* #30 - Add other stats and sort BattleActions in stack
		=> Damage formula improvement needed
		=> Sort BattleAction by battlers' speed
		=> Add stats growth functions

- Add parameters to events, like speed for characters and all params for the chests

- Improve battler death color fading
- Improve Font::printDamages color
- Improve Font::printDamages movement

- Manage disabled items in SelectableWindow ( maybe use a std::vector<std::pair<std::string, bool>>> for commands container )

- Let ItemWindows get data they'll display
- EquipItemWindow should be removed
	* Solve that problem: ItemWindow::getItem()
- Manage usable Items and their function through a lua script by object
- Create a new class ItemChoiceWindow which represents all the possibilities to do with the Item we choosed
	( For example a potion have a choice "Use" which change the mode to ChooseActorTarget )

- Create a new class SkillActivity, child of ItemActivity
	* Add it in the menu
	* Add it in the battles

- Maybe create Activity child classes instead of modes for BattleActivity

- Create a class "Animation", child class of Sprite, in order to handle things like animations in battles
	* Add movements
	* Add actions ( like blinking the player of play a sound effect )

- Improve AnimationManager using XML

- Make shop interface, callable from an event ( like a ShopActivity )
	* ShopChoiceWindow

- Make a DebugWindow which will help to test a lot of things

- Lua scripts for dungeons:
	* File tree like that:
		dungeons/
		---- dungeon1/
		---- ---- room1/
		---- ---- ---- main.lua
		---- dungeon 2/
	* etc..

- Improve EquipActivity performances on Android

- Manage a team of characters

- Create StateWindow class

- Make a save engine
	=> XML encrypted
	* Save events state ( Character position, chest open state, etc... )
	* Save player state
	* Save actors state

- Improve TitleScreen

- Add conditions in messages for CharacterEvents

- Add choices in DialogWindow

- Add colors in text

- Improve all interfaces

- Change graphics and font

- Check bugs

- Test porting to Android, Windows and Mac OS X

- Engine finished!
